{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","items","map","item","key","id","className","text","onClick","deleteItem","App","handleChange","event","setState","target","value","handleSubmit","preventDefault","state","length","newItem","Date","now","concat","filteredItem","filter","bind","onSubmit","this","placeholder","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sRA0BeA,G,MArBG,SAACC,GACZ,IACMD,EADQC,EAAMC,MACIC,KAAI,SAAAC,GACzB,OACC,yBACAC,IAAMD,EAAKE,GACXC,UAAU,QACV,2BAAIH,EAAKI,KACT,4BACAD,UAAW,MACXE,QAAU,kBAAMR,EAAMS,WAAWN,EAAKE,MAFtC,gBAOJ,OAEA,6BAAMN,KCyDEW,G,8DAxEd,WAAYV,GAAO,IAAD,8BACjB,cAAMA,IAuCNW,aAAc,SAACC,GACd,EAAKC,SAAS,CACbN,KAAMK,EAAME,OAAOC,SA1CJ,EA+CjBC,aAAc,SAACJ,GAEX,GADAA,EAAMK,iBACyB,IAA3B,EAAKC,MAAMX,KAAKY,OAApB,CAIA,IAAMC,EAAU,CACfb,KAAM,EAAKW,MAAMX,KACjBF,GAAIgB,KAAKC,OAEV,EAAKT,UAAS,SAAAK,GAAK,MAAK,CACvBjB,MAAOiB,EAAMjB,MAAMsB,OAAOH,GAC1Bb,KAAM,SA3DM,EA+DbE,WAAY,SAACJ,GACZ,IAAMmB,EAAe,EAAKN,MAAMjB,MAAMwB,QAAO,SAAAtB,GAAI,OAChDA,EAAKE,KAAMA,KACP,EAAKQ,SAAS,CACZZ,MAAOuB,KAjEnB,EAAKN,MAAS,CACbjB,MAAO,GACPM,KAAM,IAGJ,EAAKI,aAAe,EAAKA,aAAae,KAAlB,gBACpB,EAAKV,aAAc,EAAKA,aAAaU,KAAlB,gBACnB,EAAKjB,WAAW,EAAKA,WAAWiB,KAAhB,gBATF,E,qDAajB,OACQ,yBAAMpB,UAAU,OACd,qCACC,oDAEA,0BAAMA,UAAU,QAAQqB,SAAWC,KAAKZ,cACxC,2BACAa,YAAY,aACZxB,GAAI,WACJyB,KAAK,OACLf,MAAQa,KAAKV,MAAMX,KACnBwB,SAAUH,KAAKjB,eAEf,uCACOiB,KAAKV,MAAMjB,MAAMkB,QAGxB,kBAAC,EAAD,CAAWlB,MAAQ2B,KAAKV,MAAMjB,MACnBQ,WAAamB,KAAKnB,mB,GAhCxBuB,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ee711d16.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ListItem.css';\r\n\r\n\r\n\r\nconst ListItems = (props) =>{\r\n       const items = props.items;\r\n       const ListItems = items.map(item=>{\r\n       \t  return(\r\n       \t   <div \r\n       \t   key= {item.id}\r\n       \t   className='list'>\r\n       \t   <p>{item.text}\r\n           <button \r\n           className= 'del'\r\n           onClick= {() => props.deleteItem(item.id)} > delete</button>\r\n       \t   </p>\r\n       \t   </div>\r\n       \t  )\r\n       })\r\n       return(\r\n\r\n       <div>{ListItems}</div>\r\n       )\r\n}\r\n\r\nexport default ListItems;","import React, { Component } from 'react';\r\nimport ListItems from './ListItems';\r\nimport 'tachyons';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = ({\r\n\t\t\titems: [],\r\n\t\t\ttext: ''\r\n\t\t});\r\n\t    \r\n\t    this.handleChange = this.handleChange.bind(this);\r\n\t    this.handleSubmit =this.handleSubmit.bind(this);\r\n\t    this.deleteItem=this.deleteItem.bind(this);\r\n}\r\n\r\n render(){\r\n \treturn(\r\n          <div  className='App' >\r\n            <h1>Todos</h1>\r\n             <p>what needs to be done</p>\r\n             \r\n             <form className='to-do' onSubmit= {this.handleSubmit}>\r\n             <input \r\n             placeholder='Enter text'\r\n             id ='new-todo'\r\n             type='text'\r\n             value= {this.state.text}\r\n             onChange={this.handleChange} />\r\n\r\n             <button >\r\n               Add {this.state.items.length}\r\n             </button>\r\n\r\n             <ListItems items ={this.state.items } \r\n                        deleteItem ={this.deleteItem} \r\n              />\r\n\r\n            </form>\r\n          </div>\r\n \t\t);\r\n }\r\n\r\n\r\n\t\thandleChange =(event)=>{\t\r\n\t\t\tthis.setState({\r\n\t\t\t\ttext: event.target.value\r\n\t\t\t})\r\n\r\n\t\t}\r\n\r\n\t\thandleSubmit =(event)=>{\r\n\t\t    event.preventDefault();\r\n\t\t    if (this.state.text.length === 0){\r\n\t\t    \treturn;\r\n\t\t    }\r\n\r\n\t\t    const newItem = {\r\n\t\t    \ttext: this.state.text,\r\n\t\t    \tid: Date.now()\r\n\t\t    }\r\n\t\t    this.setState(state => ({\r\n\t\t    \titems: state.items.concat(newItem),\r\n\t\t    \ttext: ''\r\n\t\t    }));\r\n        }\r\n\r\n      deleteItem =(id)=>{\r\n      \tconst filteredItem = this.state.items.filter(item=>\r\n      \t\titem.id!== id);\r\n            this.setState({\r\n            \t items: filteredItem\r\n            })\r\n      }\r\n\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}